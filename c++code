
//memo--code
int jump(int n,vector<int> &heights, vector<int>&dp)
{
   if(n==0)return 0;
    if(dp[n]!=-1)return dp[n];
    int l=jump(n-1,heights,dp)+abs(heights[n]-heights[n-1]);
    int r=1000000007;
    if(n>1){
    r=jump(n-2,heights,dp)+abs(heights[n]-heights[n-2]);
    }
  return dp[n]=min(l,r);
}
*/
////tabulation with space optimization code

int frogJump(int n, vector<int> &heights)
{
    
    vector<int>dp(n+1,-1);
    int prev2=0;
    int prev1=abs(heights[0]-heights[1]);
        int curr1,curr2,curr;
    for(int i=2;i<n;i++)
    {
       curr1=prev1+abs(heights[i]-heights[i-1]);
      
            curr2=prev2+abs(heights[i]-heights[i-2]);
           curr=min(curr1,curr2);
       
        prev2=prev1;
        prev1=curr;
                    
      
    }
    return curr;
}
